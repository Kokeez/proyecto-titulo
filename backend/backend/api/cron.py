import os
import logging
from django.db.models import Sum, Avg, Q, F
from django.utils import timezone
from openai import OpenAI
from .models import Recommendation, DetalleBoleta, Producto

logger = logging.getLogger(__name__)

def generar_recomendacion_diaria():
    """
    Tarea que corre una vez al d√≠a (por ejemplo a la 1am).
    Calcula m√©tricas clave y genera una recomendaci√≥n con OpenAI.
    """
    # 0) Fecha
    fecha_hoy = timezone.localdate()
    # Evitar duplicados
    if Recommendation.objects.filter(fecha=fecha_hoy).exists():
        logger.info(f"[{fecha_hoy}] Ya existe recomendaci√≥n, no se repite.")
        return

    # 1) Ventas d√≠a anterior
    ayer = fecha_hoy - timezone.timedelta(days=1)
    ventas_ayer = DetalleBoleta.objects \
        .filter(boleta__fecha_venta__date=ayer) \
        .aggregate(total=Sum('subtotal'))['total'] or 0

    # 2) Top 3 productos m√°s vendidos ayer
    top3 = (
        DetalleBoleta.objects
        .filter(boleta__fecha_venta__date=ayer, producto__isnull=False)
        .values('producto__nombre')
        .annotate(unidades=Sum('cantidad'))
        .order_by('-unidades')[:3]
    )
    top_data = [{
        'nombre': item['producto__nombre'],
        'unidades': item['unidades']
    } for item in top3]
    # Rellenar con placeholders si faltan
    while len(top_data) < 3:
        top_data.append({'nombre': '‚Äî', 'unidades': 0})

    # 3) Slow movers √∫ltimos 7 d√≠as
    semana_atras = fecha_hoy - timezone.timedelta(days=7)
    slow = (
        Producto.objects
        .annotate(vendidas=Sum(
            'detalle_boletas__cantidad',
            filter=Q(detalle_boletas__boleta__fecha_venta__date__gte=semana_atras)
        ))
        .filter(vendidas__lt=2)
        .order_by('vendidas')[:3]
    )
    slow_list = [p.nombre for p in slow] or ['ninguno']

    # 4) Ventas hoy (hasta ahora) y promedio diario de la semana pasada
    hoy = timezone.now().date()
    venta_hoy = DetalleBoleta.objects \
        .filter(boleta__fecha_venta__date=hoy) \
        .aggregate(total=Sum('subtotal'))['total'] or 0

    promedio_semanal = DetalleBoleta.objects \
        .filter(
            boleta__fecha_venta__date__gte=semana_atras,
            boleta__fecha_venta__date__lt=hoy
        ) \
        .aggregate(prom=Avg('subtotal'))['prom'] or 0

    # 5) % cambio vs mismo d√≠a semana pasada
    mismo_dia_semana_pasada = hoy - timezone.timedelta(days=7)
    venta_semana_pasada = DetalleBoleta.objects \
        .filter(boleta__fecha_venta__date=mismo_dia_semana_pasada) \
        .aggregate(total=Sum('subtotal'))['total'] or 0
    pct_cambio = (
        (venta_hoy - venta_semana_pasada) / venta_semana_pasada * 100
        if venta_semana_pasada > 0 else 0
    )

    # 6) Stock cr√≠tico (<3 unidades)
    stock_critico = Producto.objects.filter(cantidad_disponible__lt=3)
    stock_critico_list = [p.nombre for p in stock_critico] or ['ninguno']

    # 7) Construir prompt
    prompt = f"""
Eres un asistente anal√≠tico para un taller de autos. Toma estos datos para generar un breve informe:

‚Ä¢ Fecha de an√°lisis: {fecha_hoy}  
‚Ä¢ Ventas totales del d√≠a anterior: ${ventas_ayer:.0f} CLP  
‚Ä¢ Top 3 productos m√°s vendidos ayer (con unidades vendidas):  
  1. {top_data[0]['nombre']} ‚Äì {top_data[0]['unidades']} uds  
  2. {top_data[1]['nombre']} ‚Äì {top_data[1]['unidades']} uds  
  3. {top_data[2]['nombre']} ‚Äì {top_data[2]['unidades']} uds  
‚Ä¢ Top 3 productos slow‚Äêmoving en √∫ltimos 7 d√≠as: {', '.join(slow_list)}  
‚Ä¢ Ventas hoy vs promedio diario √∫ltima semana: ${venta_hoy:.0f} vs ${promedio_semanal:.0f}  
‚Ä¢ Cambio % vs mismo d√≠a semana pasada: {pct_cambio:.1f}%  
‚Ä¢ Stock cr√≠tico (menos de 3 unidades): {', '.join(stock_critico_list)}

Con base en esto:
1. Haz un resumen de 2‚Äì3 l√≠neas sobre el desempe√±o general (tendencias, puntos fuertes y d√©biles).  
2. Prop√≥n 3 recomendaciones concretas (una por l√≠nea) para mejorar ventas o rotaci√≥n de stock.  
Mant√©n tono claro y orientado a la acci√≥n.
""".strip()

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role":"user","content":prompt}],
        temperature=0.7,
    )
    texto = resp.choices[0].message.content.strip()

    Recommendation.objects.create(fecha=fecha_hoy, contenido=texto)
    logger.info(f"[{timezone.now()}] üìù Recommendation creada para {fecha_hoy}")
